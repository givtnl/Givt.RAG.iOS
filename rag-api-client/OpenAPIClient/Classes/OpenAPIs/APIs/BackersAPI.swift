//
// BackersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class BackersAPI {
    /**

     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBackerDetail(eventId: String, participantId: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BackerDetailModel?, _ error: Error?) -> Void)) {
        getBackerDetailWithRequestBuilder(eventId: eventId, participantId: participantId, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/{eventId}/participants/{participantId}/backers/{id}
     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<BackerDetailModel> 
     */
    open class func getBackerDetailWithRequestBuilder(eventId: String, participantId: String, id: String) -> RequestBuilder<BackerDetailModel> {
        var path = "/events/{eventId}/participants/{participantId}/backers/{id}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BackerDetailModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBackersList(eventId: String, participantId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [BackerListModel]?, _ error: Error?) -> Void)) {
        getBackersListWithRequestBuilder(eventId: eventId, participantId: participantId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/{eventId}/participants/{participantId}/backers
     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - returns: RequestBuilder<[BackerListModel]> 
     */
    open class func getBackersListWithRequestBuilder(eventId: String, participantId: String) -> RequestBuilder<[BackerListModel]> {
        var path = "/events/{eventId}/participants/{participantId}/backers"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[BackerListModel]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - parameter registerBackerCommand: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerBacker(eventId: String, participantId: String, registerBackerCommand: RegisterBackerCommand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: BackerDetailModel?, _ error: Error?) -> Void)) {
        registerBackerWithRequestBuilder(eventId: eventId, participantId: participantId, registerBackerCommand: registerBackerCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/{eventId}/participants/{participantId}/backers
     - parameter eventId: (path)  
     - parameter participantId: (path)  
     - parameter registerBackerCommand: (body)  
     - returns: RequestBuilder<BackerDetailModel> 
     */
    open class func registerBackerWithRequestBuilder(eventId: String, participantId: String, registerBackerCommand: RegisterBackerCommand) -> RequestBuilder<BackerDetailModel> {
        var path = "/events/{eventId}/participants/{participantId}/backers"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let participantIdPreEscape = "\(APIHelper.mapValueToPathItem(participantId))"
        let participantIdPostEscape = participantIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{participantId}", with: participantIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerBackerCommand)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BackerDetailModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
