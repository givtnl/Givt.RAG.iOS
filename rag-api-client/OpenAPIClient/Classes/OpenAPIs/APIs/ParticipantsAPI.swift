//
// ParticipantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ParticipantsAPI {
    /**

     - parameter eventId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getParticipantDetail(eventId: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ParticipantDetailModel?, _ error: Error?) -> Void)) {
        getParticipantDetailWithRequestBuilder(eventId: eventId, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/{eventId}/participants/{id}
     - parameter eventId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<ParticipantDetailModel> 
     */
    open class func getParticipantDetailWithRequestBuilder(eventId: String, id: String) -> RequestBuilder<ParticipantDetailModel> {
        var path = "/events/{eventId}/participants/{id}"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ParticipantDetailModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getParticipantsList(eventId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ParticipantListModel]?, _ error: Error?) -> Void)) {
        getParticipantsListWithRequestBuilder(eventId: eventId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /events/{eventId}/participants
     - parameter eventId: (path)  
     - returns: RequestBuilder<[ParticipantListModel]> 
     */
    open class func getParticipantsListWithRequestBuilder(eventId: String) -> RequestBuilder<[ParticipantListModel]> {
        var path = "/events/{eventId}/participants"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<[ParticipantListModel]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     FinishEventForParticipant
     
     - parameter eventId: (path)  
     - parameter id: (path)  
     - parameter finishParticipantCommand: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func participantsFinish(eventId: String, id: String, finishParticipantCommand: FinishParticipantCommand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        participantsFinishWithRequestBuilder(eventId: eventId, id: id, finishParticipantCommand: finishParticipantCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     FinishEventForParticipant
     - PATCH /events/{eventId}/participants/{id}/finish
     - Updates the status for a given participant for a given event to Finished
     - parameter eventId: (path)  
     - parameter id: (path)  
     - parameter finishParticipantCommand: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func participantsFinishWithRequestBuilder(eventId: String, id: String, finishParticipantCommand: FinishParticipantCommand) -> RequestBuilder<Void> {
        var path = "/events/{eventId}/participants/{id}/finish"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: finishParticipantCommand)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter registerParticipantCommand: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func registerParticipant(eventId: String, registerParticipantCommand: RegisterParticipantCommand, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ParticipantDetailModel?, _ error: Error?) -> Void)) {
        registerParticipantWithRequestBuilder(eventId: eventId, registerParticipantCommand: registerParticipantCommand).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /events/{eventId}/participants
     - parameter eventId: (path)  
     - parameter registerParticipantCommand: (body)  
     - returns: RequestBuilder<ParticipantDetailModel> 
     */
    open class func registerParticipantWithRequestBuilder(eventId: String, registerParticipantCommand: RegisterParticipantCommand) -> RequestBuilder<ParticipantDetailModel> {
        var path = "/events/{eventId}/participants"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: registerParticipantCommand)

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ParticipantDetailModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**

     - parameter eventId: (path)  
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func startEventForParticipant(eventId: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) {
        startEventForParticipantWithRequestBuilder(eventId: eventId, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - PATCH /events/{eventId}/participants/{id}/start
     - parameter eventId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func startEventForParticipantWithRequestBuilder(eventId: String, id: String) -> RequestBuilder<Void> {
        var path = "/events/{eventId}/participants/{id}/start"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{eventId}", with: eventIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}
